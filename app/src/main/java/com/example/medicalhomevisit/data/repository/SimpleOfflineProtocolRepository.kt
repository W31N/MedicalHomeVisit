package com.example.medicalhomevisit.data.repository

import android.util.Log
import com.example.medicalhomevisit.data.local.dao.ProtocolTemplateDao
import com.example.medicalhomevisit.data.local.dao.VisitProtocolDao
import com.example.medicalhomevisit.data.local.entity.ProtocolTemplateEntity
import com.example.medicalhomevisit.data.local.entity.VisitProtocolEntity
import com.example.medicalhomevisit.data.remote.api.ProtocolApiService // –¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å
import com.example.medicalhomevisit.data.remote.dto.ProtocolTemplateDto
import com.example.medicalhomevisit.data.remote.dto.VisitProtocolDto
import com.example.medicalhomevisit.data.sync.SyncManager
import com.example.medicalhomevisit.domain.model.ProtocolTemplate
import com.example.medicalhomevisit.domain.model.VisitProtocol // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–æ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
import com.example.medicalhomevisit.domain.repository.AuthRepository
import com.example.medicalhomevisit.domain.repository.ProtocolRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.mapNotNull
import java.util.Date
import java.util.UUID
import javax.inject.Inject
import javax.inject.Singleton


@Singleton
class SimpleOfflineProtocolRepository @Inject constructor(
    private val protocolApiService: ProtocolApiService,
    private val visitProtocolDao: VisitProtocolDao,
    private val protocolTemplateDao: ProtocolTemplateDao,
    private val authRepository: AuthRepository,
    private val syncManager: SyncManager
) : ProtocolRepository {

    companion object {
        private const val TAG = "OfflineProtocolRepo"
    }

    fun observeProtocolForVisit(visitId: String): Flow<VisitProtocol?> { // –°–¥–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º –∏ –Ω–µ override, –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        return visitProtocolDao.getProtocolByVisitId(visitId).map { entity ->
            entity?.toDomainModel()
        }
    }

    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –ø–æ—ç—Ç–æ–º—É –±–µ–∑ override
    suspend fun refreshProtocolForVisit(visitId: String): Result<Unit> {
        return try {
            Log.d(TAG, "üì° Refreshing protocol for visit $visitId from server...")
            val response = protocolApiService.getProtocolForVisit(visitId)
            if (response.isSuccessful && response.body() != null) {
                val protocolDto = response.body()!!
                visitProtocolDao.insertProtocol(protocolDto.toEntity(isSynced = true)) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                Log.d(TAG, "‚úÖ Protocol for visit $visitId refreshed and saved to Room.")
                Result.success(Unit)
            } else {
                val errorMsg = "Error fetching protocol: ${response.code()} - ${response.message()}"
                Log.w(TAG, "‚ùå $errorMsg")
                Result.failure(Exception(errorMsg))
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Network error refreshing protocol for visit $visitId: ${e.message}", e)
            Result.failure(e)
        }
    }

    override suspend fun getProtocolForVisit(visitId: String): VisitProtocol? {
        val localProtocol = visitProtocolDao.getProtocolByVisitIdOnce(visitId)?.toDomainModel()
        try {
            Log.d(TAG, "üì° Attempting to fetch/update protocol for visit $visitId from server...")
            val response = protocolApiService.getProtocolForVisit(visitId)
            if (response.isSuccessful && response.body() != null) {
                val dto = response.body()!!
                visitProtocolDao.insertProtocol(dto.toEntity(isSynced = true))
                Log.d(TAG, "‚úÖ Protocol for visit $visitId fetched/updated and saved.")
                return dto.toDomainModel()
            } else if (localProtocol != null) {
                Log.w(TAG, "‚ö†Ô∏è Failed to fetch protocol for $visitId from server (${response.code()}), returning local version.")
                return localProtocol
            } else {
                Log.w(TAG, "‚ö†Ô∏è Failed to fetch protocol for $visitId from server (${response.code()}) and no local version.")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Network error fetching protocol for $visitId: ${e.message}")
            if (localProtocol != null) {
                Log.w(TAG, "Returning local version of protocol for $visitId due to network error.")
                return localProtocol
            }
        }
        return null
    }

    override suspend fun saveProtocol(protocol: VisitProtocol): VisitProtocol {
        Log.d(TAG, "üíæ Saving protocol for visit ${protocol.visitId}, protocol ID: ${protocol.id}")
        val existingLocalProtocolById = protocol.id?.takeIf { it.isNotBlank() && !it.startsWith("local_") }?.let {
            visitProtocolDao.getProtocolById(it)
        }
        // –ï—Å–ª–∏ ID –µ—Å—Ç—å –∏ –æ–Ω –Ω–µ –ª–æ–∫–∞–ª—å–Ω—ã–π, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –Ω–µ–º—É. –ï—Å–ª–∏ –Ω–µ—Ç, –∏—â–µ–º –ø–æ visitId, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–∑–∏—Ç–∞.
        val existingLocalProtocolByVisitId = visitProtocolDao.getProtocolByVisitIdOnce(protocol.visitId)

        // –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏:
        // 1. ID –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø—É—Å—Ç–æ–π –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π.
        // 2. ID –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –µ—Å—Ç—å, –Ω–æ —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ (–∑–Ω–∞—á–∏—Ç, —ç—Ç–æ ID —Å —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –º—ã –µ–µ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ "–Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é").
        // 3. –ò–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ visitId –≤–æ–æ–±—â–µ –Ω–µ –±—ã–ª–æ –ª–æ–∫–∞–ª—å–Ω–æ.
        val isNewToServer = protocol.id.isNullOrBlank() ||
                protocol.id.startsWith("local_") ||
                (existingLocalProtocolById == null && existingLocalProtocolByVisitId == null) ||
                (existingLocalProtocolByVisitId != null && existingLocalProtocolByVisitId.syncAction == "CREATE")


        val entityToSave = protocol.toEntity(
            isSynced = false,
            syncAction = if (isNewToServer) "CREATE" else "UPDATE",
            updatedAt = Date(),
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è "–≤—Ä–µ–º–µ–Ω–Ω—ã–º" –ª–æ–∫–∞–ª—å–Ω—ã–º
            idForEntity = if (protocol.id.isNullOrBlank() || protocol.id.startsWith("local_")) {
                "local_proto_${UUID.randomUUID()}"
            } else {
                protocol.id
            }
        )

        visitProtocolDao.insertProtocol(entityToSave)
        Log.d(TAG, "üìù Protocol for visit ${entityToSave.visitId} (ID: ${entityToSave.id}) saved to Room, marked for sync: ${entityToSave.syncAction}")
        syncManager.syncNow()
        return entityToSave.toDomainModel()
    }

    // –ò–º—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω—ã, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    override suspend fun applyTemplate(visitId: String, templateId: String): VisitProtocol {
        Log.d(TAG, "üîß Applying template $templateId to protocol for visit $visitId")
        val template = protocolTemplateDao.getTemplateById(templateId)?.toDomainModel()
            ?: throw NoSuchElementException("Template $templateId not found locally")

        var currentProtocol = getProtocolForVisit(visitId) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
        val now = Date()

        if (currentProtocol == null) {
            currentProtocol = VisitProtocol(
                id = "local_${UUID.randomUUID()}",
                visitId = visitId,
                templateId = templateId,
                complaints = template.complaints,
                anamnesis = template.anamnesis,
                objectiveStatus = template.objectiveStatus,
                recommendations = template.recommendations,
                createdAt = now,
                updatedAt = now
            )
        } else {
            currentProtocol = currentProtocol.copy(
                templateId = templateId,
                complaints = template.complaints.takeIf { !it.isNullOrEmpty() } ?: currentProtocol.complaints,
                anamnesis = template.anamnesis.takeIf { !it.isNullOrEmpty() } ?: currentProtocol.anamnesis,
                objectiveStatus = template.objectiveStatus.takeIf { !it.isNullOrEmpty() } ?: currentProtocol.objectiveStatus,
                recommendations = template.recommendations.takeIf { !it.isNullOrEmpty() } ?: currentProtocol.recommendations,
                updatedAt = now
            )
        }
        return saveProtocol(currentProtocol) // saveProtocol –ø–æ–º–µ—Ç–∏—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –¥–æ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    }

    override suspend fun updateProtocolField(visitId: String, field: String, value: String): VisitProtocol {
        var protocol = getProtocolForVisit(visitId)
            ?: throw NoSuchElementException("Protocol for visit $visitId not found to update field $field")

        protocol = when (field.lowercase()) {
            "complaints" -> protocol.copy(complaints = value)
            "anamnesis" -> protocol.copy(anamnesis = value)
            "objectivestatus" -> protocol.copy(objectiveStatus = value) // –£–±–µ–¥–∏—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω –ø–æ–ª–µ–π
            "diagnosis" -> protocol.copy(diagnosis = value)
            "diagnosiscode" -> protocol.copy(diagnosisCode = value)
            "recommendations" -> protocol.copy(recommendations = value)
            else -> throw IllegalArgumentException("Unknown field for protocol: $field")
        }
        return saveProtocol(protocol.copy(updatedAt = Date()))
    }

    override suspend fun updateVitals(
        visitId: String,
        temperature: Float?,
        systolicBP: Int?,
        diastolicBP: Int?,
        pulse: Int?
    ): VisitProtocol {
        var protocol = getProtocolForVisit(visitId)
            ?: throw NoSuchElementException("Protocol for visit $visitId not found to update vitals")

        protocol = protocol.copy(
            temperature = temperature ?: protocol.temperature,
            systolicBP = systolicBP ?: protocol.systolicBP,
            diastolicBP = diastolicBP ?: protocol.diastolicBP,
            pulse = pulse ?: protocol.pulse,
            updatedAt = Date()
        )
        return saveProtocol(protocol)
    }

    override suspend fun deleteProtocol(visitId: String) {
        Log.d(TAG, "üóëÔ∏è Request to delete protocol for visit $visitId")
        val protocolEntity = visitProtocolDao.getProtocolByVisitIdOnce(visitId)
        if (protocolEntity != null) {
            if (protocolEntity.syncAction == "CREATE") {
                visitProtocolDao.deleteProtocolById(protocolEntity.id)
                Log.d(TAG, "üóëÔ∏è Locally created protocol ${protocolEntity.id} deleted from Room.")
            } else {
                val updatedEntity = protocolEntity.copy(
                    isSynced = false,
                    syncAction = "DELETE",
                    updatedAt = Date()
                )
                visitProtocolDao.insertProtocol(updatedEntity)
                syncManager.syncNow()
                Log.d(TAG, "üìù Protocol ${protocolEntity.id} marked for DELETE sync.")
            }
        } else {
            Log.w(TAG, "No protocol found for visit $visitId to delete.")
        }
    }

    override suspend fun syncProtocols(): Result<Unit> {
        Log.d(TAG, "üîÑ Manual sync requested for protocols.")
        syncManager.syncNow()
        return Result.success(Unit)
    }

    override suspend fun cacheProtocols(protocols: List<VisitProtocol>) {
        Log.d(TAG, "üíæ Caching ${protocols.size} protocols.")
        val entities = protocols.map {
            it.toEntity(isSynced = true, syncAction = null, updatedAt = it.updatedAt ?: Date(), idForEntity = it.id)
        }
        visitProtocolDao.insertProtocols(entities)
    }

    override suspend fun getCachedProtocols(): List<VisitProtocol> {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω—É–∂–µ–Ω –º–µ—Ç–æ–¥ –≤ DAO –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        // –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç, —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.
        // @Query("SELECT * FROM visit_protocols") fun getAllProtocols(): List<VisitProtocolEntity>
        // val allEntities = visitProtocolDao.getAllProtocols()
        // return allEntities.map { it.toDomainModel() }
        Log.w(TAG, "getCachedProtocols: Needs DAO.getAllProtocols() or similar. Returning empty for now.")
        return emptyList()
    }

    override suspend fun getCachedProtocolForVisit(visitId: String): VisitProtocol? {
        return visitProtocolDao.getProtocolByVisitIdOnce(visitId)?.toDomainModel()
    }

    // --- –ú–ï–¢–û–î–´ –î–õ–Ø ProtocolTemplate ---
    // –†–µ–∞–ª–∏–∑—É–µ–º –∏—Ö –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ProtocolRepository –∏—Ö —Ç—Ä–µ–±—É–µ—Ç

    override suspend fun getProtocolTemplates(): List<ProtocolTemplate> {
        var templates = protocolTemplateDao.getAllTemplates().firstOrNull()?.map { it.toDomainModel() } ?: emptyList()
        if (templates.isEmpty()) { // –ü—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç
            Log.d(TAG, "No local templates, attempting to refresh from server...")
            refreshProtocolTemplatesInternal().fold(
                onSuccess = {
                    templates = protocolTemplateDao.getAllTemplates().firstOrNull()?.map { it.toDomainModel() } ?: emptyList()
                },
                onFailure = { Log.e(TAG, "Failed to refresh templates: ${it.message}") }
            )
        }
        return templates
    }

    private suspend fun refreshProtocolTemplatesInternal(): Result<Unit> { // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
        Log.d(TAG, "üì° Refreshing protocol templates from server (internal)...")
        return try {
            val response = protocolApiService.getProtocolTemplates()
            if (response.isSuccessful && response.body() != null) {
                val dtos = response.body()!!
                if (dtos.isNotEmpty()){
                    protocolTemplateDao.insertTemplates(dtos.map { it.toEntity() })
                    Log.d(TAG, "‚úÖ Refreshed and saved ${dtos.size} templates to Room.")
                } else {
                    Log.d(TAG, "‚úÖ Server returned 0 templates. No changes to local cache.")
                    // –†–µ—à–∏, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—â–∞—Ç—å –∫—ç—à, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 0. –ü–æ–∫–∞ –Ω–µ –æ—á–∏—â–∞–µ–º.
                    // protocolTemplateDao.deleteAllTemplates() // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å
                }
                Result.success(Unit)
            } else {
                Result.failure(Exception("Failed to fetch templates from API: ${response.code()}"))
            }
        } catch (e: Exception) {
            Result.failure(e)
        }
    }

    override suspend fun getProtocolTemplateById(templateId: String): ProtocolTemplate? {
        return protocolTemplateDao.getTemplateById(templateId)?.toDomainModel()
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É "–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    }

    // --- –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ú–ê–ü–ü–ï–†–´ (–ø–æ–º–µ—Å—Ç–∏ –∏—Ö –≤ —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–∏–∂–µ –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π Mappers.kt) ---

    // –ú–∞–ø–ø–µ—Ä—ã –¥–ª—è VisitProtocol
    private fun VisitProtocolEntity.toDomainModel(): VisitProtocol {
        return VisitProtocol(
            id = this.id,
            visitId = this.visitId,
            templateId = this.templateId,
            complaints = this.complaints ?: "",
            anamnesis = this.anamnesis ?: "",
            objectiveStatus = this.objectiveStatus ?: "",
            diagnosis = this.diagnosis ?: "",
            diagnosisCode = this.diagnosisCode ?: "",
            recommendations = this.recommendations ?: "",
            temperature = this.temperature,
            systolicBP = this.systolicBP,
            diastolicBP = this.diastolicBP,
            pulse = this.pulse,
            additionalVitals = this.additionalVitals,
            createdAt = this.createdAt,
            updatedAt = this.updatedAt
            // –ü–æ–ª—è isSynced, syncAction –∏ —Ç.–¥. –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω—ã –≤ –¥–æ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        )
    }

    // idForEntity - —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π ID
    private fun VisitProtocol.toEntity(isSynced: Boolean, syncAction: String?, updatedAt: Date, idForEntity: String? = this.id): VisitProtocolEntity {
        val finalId = idForEntity ?: "error_id_${UUID.randomUUID()}" // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å ID
        return VisitProtocolEntity(
            id = finalId,
            visitId = this.visitId,
            templateId = this.templateId,
            complaints = this.complaints,
            anamnesis = this.anamnesis,
            objectiveStatus = this.objectiveStatus,
            diagnosis = this.diagnosis,
            diagnosisCode = this.diagnosisCode,
            recommendations = this.recommendations,
            temperature = this.temperature,
            systolicBP = this.systolicBP,
            diastolicBP = this.diastolicBP,
            pulse = this.pulse,
            additionalVitals = this.additionalVitals ?: emptyMap(),
            createdAt = this.createdAt ?: updatedAt, // createdAt –Ω–µ –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            updatedAt = updatedAt,
            isSynced = isSynced,
            syncAction = syncAction,
            lastSyncAttempt = if (!isSynced) Date() else null, // –ü—Ä–∏–º–µ—Ä
            failCount = if (!isSynced) 0 else (this as? VisitProtocolEntity)?.failCount ?: 0 // –ù–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ, –ª—É—á—à–µ –Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å
        )
    }

    // –ú–∞–ø–ø–µ—Ä –∏–∑ DTO –≤ Entity –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
    private fun VisitProtocolDto.toEntity(isSynced: Boolean = true): VisitProtocolEntity {
        val currentDate = Date()
        return VisitProtocolEntity(
            id = this.id ?: "dto_err_${UUID.randomUUID()}", // –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å ID
            visitId = this.visitId,
            templateId = this.templateId,
            complaints = this.complaints,
            anamnesis = this.anamnesis,
            objectiveStatus = this.objectiveStatus,
            diagnosis = this.diagnosis,
            diagnosisCode = this.diagnosisCode,
            recommendations = this.recommendations,
            temperature = this.temperature,
            systolicBP = this.systolicBP,
            diastolicBP = this.diastolicBP,
            pulse = this.pulse,
            additionalVitals = this.additionalVitals ?: emptyMap(),
            createdAt = this.createdAt ?: currentDate,
            updatedAt = this.updatedAt ?: currentDate,
            isSynced = isSynced,
            syncAction = null // –° —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
        )
    }

    // –ú–∞–ø–ø–µ—Ä –∏–∑ DTO –≤ Domain (–µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DTO, –∞ —Ç—ã —Ö–æ—á–µ—à—å —Å—Ä–∞–∑—É Domain)
    private fun VisitProtocolDto.toDomainModel(): VisitProtocol {
        val currentDate = Date()
        return VisitProtocol(
            id = this.id ?: "dto_err_${UUID.randomUUID()}",
            visitId = this.visitId,
            templateId = this.templateId,
            complaints = this.complaints ?: "",
            anamnesis = this.anamnesis ?: "",
            objectiveStatus = this.objectiveStatus ?: "",
            diagnosis = this.diagnosis ?: "",
            diagnosisCode = this.diagnosisCode ?: "",
            recommendations = this.recommendations ?: "",
            temperature = this.temperature,
            systolicBP = this.systolicBP,
            diastolicBP = this.diastolicBP,
            pulse = this.pulse,
            additionalVitals = this.additionalVitals,
            createdAt = this.createdAt ?: currentDate,
            updatedAt = this.updatedAt ?: currentDate
        )
    }

    // –ú–∞–ø–ø–µ—Ä—ã –¥–ª—è ProtocolTemplate (—Ç—ã –∏—Ö —É–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ —Å–¥–µ–ª–∞–ª)
    private fun ProtocolTemplateEntity.toDomainModel(): ProtocolTemplate {
        return ProtocolTemplate(
            id = this.id,
            name = this.name,
            description = this.description ?: "",
            complaints = this.complaintsTemplate ?: "",
            anamnesis = this.anamnesisTemplate ?: "",
            objectiveStatus = this.objectiveStatusTemplate ?: "",
            recommendations = this.recommendationsTemplate ?: "",
            requiredVitals = this.requiredVitals,
            // category = null, // –ï—Å–ª–∏ –≤ Domain –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å, –∞ –≤ Entity –Ω–µ—Ç
            // createdAt = this.createdAt, // –ï—Å–ª–∏ –µ—Å—Ç—å –≤ Domain
            // updatedAt = this.updatedAt  // –ï—Å–ª–∏ –µ—Å—Ç—å –≤ Domain
        )
    }

    private fun ProtocolTemplateDto.toEntity(): ProtocolTemplateEntity {
        val currentDate = Date()
        return ProtocolTemplateEntity(
            id = this.id,
            name = this.name,
            description = this.description,
            complaintsTemplate = this.complaintsTemplate,
            anamnesisTemplate = this.anamnesisTemplate,
            objectiveStatusTemplate = this.objectiveStatusTemplate,
            recommendationsTemplate = this.recommendationsTemplate,
            requiredVitals = this.requiredVitals ?: emptyList(),
            createdAt = this.createdAt ?: currentDate,
            updatedAt = this.updatedAt ?: currentDate
        )
    }
}