package com.example.medicalhomevisit.data.repository

import android.util.Log
import com.example.medicalhomevisit.data.local.dao.PatientDao
import com.example.medicalhomevisit.data.local.entity.PatientEntity
import com.example.medicalhomevisit.data.remote.api.PatientApiService
import com.example.medicalhomevisit.data.remote.dto.PatientDto
import com.example.medicalhomevisit.data.remote.dto.PatientProfileUpdateDto
import com.example.medicalhomevisit.domain.model.Gender
import com.example.medicalhomevisit.domain.model.Patient
import com.example.medicalhomevisit.domain.model.PatientProfileUpdate
import com.example.medicalhomevisit.domain.repository.AuthRepository
import com.example.medicalhomevisit.domain.repository.PatientRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.launch
import java.util.Date
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class SimpleOfflinePatientRepository @Inject constructor(
    private val patientDao: PatientDao,
    private val patientApiService: PatientApiService,
    private val authRepository: AuthRepository
) : PatientRepository {

    companion object {
        private const val TAG = "OfflinePatientRepo"
    }

    // ===== OFFLINE-FIRST: –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Room =====

    override suspend fun getPatientById(patientId: String): Patient {
        Log.d(TAG, "üîç Getting patient by ID: $patientId")

        // 1. –°–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ Room
        val localPatient = patientDao.getPatientById(patientId)?.toDomainModel()

        // 2. –í —Ñ–æ–Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
        tryRefreshPatientFromServer(patientId)

        // 3. –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        return localPatient ?: throw Exception("–ü–∞—Ü–∏–µ–Ω—Ç —Å ID $patientId –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    override fun observePatient(patientId: String): Flow<Patient> {
        Log.d(TAG, "üëÅÔ∏è Observing patient: $patientId")

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        tryRefreshPatientFromServer(patientId)

        return patientDao.observePatient(patientId).map { entity ->
            entity?.toDomainModel() ?: throw Exception("–ü–∞—Ü–∏–µ–Ω—Ç —Å ID $patientId –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
    }

    override suspend fun searchPatients(query: String): List<Patient> {
        Log.d(TAG, "üîç Searching patients with query: '$query'")

        if (query.isBlank()) return emptyList()

        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        val localResults = patientDao.searchPatients(query).map { entities ->
            entities.map { it.toDomainModel() }
        }

        // –í —Ñ–æ–Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
        trySearchPatientsOnServer(query)

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Flow (–ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        return try {
            localResults.first()
        } catch (e: Exception) {
            Log.w(TAG, "Error getting local search results: ${e.message}")
            emptyList()
        }
    }

    override suspend fun getAllPatients(): List<Patient> {
        Log.d(TAG, "üìã Getting all patients")

        // –°–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        val localPatients = patientDao.getAllPatientsSync().map { it.toDomainModel() }

        // –í —Ñ–æ–Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
        tryRefreshAllPatientsFromServer()

        return localPatients
    }

    override fun observePatients(): Flow<List<Patient>> {
        Log.d(TAG, "üëÅÔ∏è Observing all patients")

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        tryRefreshAllPatientsFromServer()

        return patientDao.getAllPatients().map { entities ->
            entities.map { it.toDomainModel() }
        }
    }

    // ===== –ü–†–û–§–ò–õ–¨ –ü–ê–¶–ò–ï–ù–¢–ê =====

    override suspend fun getMyProfile(): Patient {
        Log.d(TAG, "üë§ Getting my patient profile")

        try {
            val response = patientApiService.getMyProfile()
            if (response.isSuccessful && response.body() != null) {
                val dto = response.body()!!
                val patient = dto.toDomainModel()

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
                val entity = patient.toEntity(isSynced = true)
                patientDao.insertPatient(entity)

                Log.d(TAG, "‚úÖ My profile loaded from server")
                return patient
            } else {
                throw Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${response.code()}")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error loading my profile from server: ${e.message}", e)
            throw e
        }
    }

    override suspend fun updateMyProfile(profileUpdate: PatientProfileUpdate): Patient {
        Log.d(TAG, "‚úèÔ∏è Updating my patient profile")

        try {
            val dto = PatientProfileUpdateDto(
                dateOfBirth = profileUpdate.dateOfBirth,
                gender = profileUpdate.gender?.name,
                address = profileUpdate.address,
                phoneNumber = profileUpdate.phoneNumber,
                policyNumber = profileUpdate.policyNumber,
                allergies = profileUpdate.allergies,
                chronicConditions = profileUpdate.chronicConditions
            )

            val response = patientApiService.updateMyProfile(dto)
            if (response.isSuccessful && response.body() != null) {
                val updatedDto = response.body()!!
                val updatedPatient = updatedDto.toDomainModel()

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
                val entity = updatedPatient.toEntity(isSynced = true)
                patientDao.insertPatient(entity)

                Log.d(TAG, "‚úÖ My profile updated successfully")
                return updatedPatient
            } else {
                throw Exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${response.code()}")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error updating my profile: ${e.message}", e)
            throw e
        }
    }

    // ===== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø =====

    override suspend fun cachePatients(patients: List<Patient>) {
        val entities = patients.map { it.toEntity(isSynced = true) }
        patientDao.insertPatients(entities)
        Log.d(TAG, "üíæ Cached ${entities.size} patients")
    }

    override suspend fun getCachedPatients(): List<Patient> {
        return patientDao.getAllPatientsSync().map { it.toDomainModel() }
    }

    override suspend fun getCachedPatientById(patientId: String): Patient? {
        return patientDao.getPatientById(patientId)?.toDomainModel()
    }

    override suspend fun syncPatients(): Result<List<Patient>> {
        return try {
            Log.d(TAG, "üîÑ Manual patient sync requested")

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            tryRefreshAllPatientsFromServer()

            val patients = getCachedPatients()
            Result.success(patients)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Patient sync failed: ${e.message}", e)
            Result.failure(e)
        }
    }

    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

    private fun tryRefreshPatientFromServer(patientId: String) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI
        kotlinx.coroutines.CoroutineScope(kotlinx.coroutines.Dispatchers.IO).launch {
            try {
                Log.d(TAG, "üì° Refreshing patient $patientId from server")
                val response = patientApiService.getPatientById(patientId)

                if (response.isSuccessful && response.body() != null) {
                    val dto = response.body()!!
                    val entity = dto.toEntity(isSynced = true)
                    patientDao.insertPatient(entity)
                    Log.d(TAG, "‚úÖ Patient $patientId refreshed from server")
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ùå Failed to refresh patient $patientId: ${e.message}")
            }
        }
    }

    private fun trySearchPatientsOnServer(query: String) {
        kotlinx.coroutines.CoroutineScope(kotlinx.coroutines.Dispatchers.IO).launch {
            try {
                Log.d(TAG, "üì° Searching patients on server: '$query'")
                val response = patientApiService.searchPatients(query)

                if (response.isSuccessful && response.body() != null) {
                    val dtos = response.body()!!
                    val entities = dtos.map { it.toEntity(isSynced = true) }
                    patientDao.insertPatients(entities)
                    Log.d(TAG, "‚úÖ Found ${entities.size} patients on server")
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ùå Failed to search patients on server: ${e.message}")
            }
        }
    }

    private fun tryRefreshAllPatientsFromServer() {
        kotlinx.coroutines.CoroutineScope(kotlinx.coroutines.Dispatchers.IO).launch {
            try {
                Log.d(TAG, "üì° Refreshing all patients from server")
                val response = patientApiService.getAllPatients()

                if (response.isSuccessful && response.body() != null) {
                    val dtos = response.body()!!
                    val entities = dtos.map { it.toEntity(isSynced = true) }
                    patientDao.insertPatients(entities)
                    Log.d(TAG, "‚úÖ Refreshed ${entities.size} patients from server")
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ùå Failed to refresh all patients: ${e.message}")
            }
        }
    }

    // ===== –ö–û–ù–í–ï–†–¢–ï–†–´ =====

    private fun PatientEntity.toDomainModel(): Patient {
        return Patient(
            id = this.id,
            fullName = this.fullName,
            dateOfBirth = this.dateOfBirth,
            age = this.age,
            gender = try {
                if (this.gender != null) Gender.valueOf(this.gender) else Gender.UNKNOWN
            } catch (e: Exception) {
                Gender.UNKNOWN
            },
            address = this.address,
            phoneNumber = this.phoneNumber,
            policyNumber = this.policyNumber,
            allergies = this.allergies,
            chronicConditions = this.chronicConditions
        )
    }

    private fun Patient.toEntity(isSynced: Boolean = true, syncAction: String? = null): PatientEntity {
        return PatientEntity(
            id = this.id,
            fullName = this.fullName,
            dateOfBirth = this.dateOfBirth,
            age = this.age,
            gender = this.gender.name,
            address = this.address,
            phoneNumber = this.phoneNumber,
            policyNumber = this.policyNumber,
            allergies = this.allergies,
            chronicConditions = this.chronicConditions,
            createdAt = Date(),
            updatedAt = Date(),
            isSynced = isSynced,
            syncAction = syncAction
        )
    }

    private fun PatientDto.toDomainModel(): Patient {
        return Patient(
            id = this.id,
            fullName = this.fullName,
            dateOfBirth = this.dateOfBirth,
            age = this.age,
            gender = try {
                if (this.gender != null) Gender.valueOf(this.gender) else Gender.UNKNOWN
            } catch (e: Exception) {
                Gender.UNKNOWN
            },
            address = this.address ?: "",
            phoneNumber = this.phoneNumber ?: "",
            policyNumber = this.policyNumber ?: "",
            allergies = this.allergies,
            chronicConditions = this.chronicConditions
        )
    }

    private fun PatientDto.toEntity(isSynced: Boolean = true): PatientEntity {
        return PatientEntity(
            id = this.id,
            fullName = this.fullName,
            dateOfBirth = this.dateOfBirth,
            age = this.age,
            gender = this.gender,
            address = this.address ?: "",
            phoneNumber = this.phoneNumber ?: "",
            policyNumber = this.policyNumber ?: "",
            allergies = this.allergies,
            chronicConditions = this.chronicConditions,
            createdAt = this.createdAt,
            updatedAt = this.updatedAt,
            isSynced = isSynced,
            syncAction = null
        )
    }

    // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò =====

    suspend fun getUnsyncedCount(): Int {
        return try {
            patientDao.getUnsyncedCount()
        } catch (e: Exception) {
            Log.w(TAG, "Error getting unsynced count: ${e.message}")
            0
        }
    }

    suspend fun getUnsyncedPatients(): List<Patient> {
        return try {
            patientDao.getUnsyncedPatients().map { it.toDomainModel() }
        } catch (e: Exception) {
            Log.w(TAG, "Error getting unsynced patients: ${e.message}")
            emptyList()
        }
    }
}