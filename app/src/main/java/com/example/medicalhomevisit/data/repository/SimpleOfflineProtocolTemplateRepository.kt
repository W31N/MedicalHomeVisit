package com.example.medicalhomevisit.data.repository

import android.util.Log
import com.example.medicalhomevisit.data.local.dao.ProtocolTemplateDao
import com.example.medicalhomevisit.data.local.entity.ProtocolTemplateEntity
import com.example.medicalhomevisit.data.remote.api.ProtocolApiService // –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π TemplateApiService
import com.example.medicalhomevisit.data.remote.dto.ProtocolTemplateDto
import com.example.medicalhomevisit.domain.model.ProtocolTemplate // –î–æ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
import com.example.medicalhomevisit.domain.repository.ProtocolTemplateRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull
import kotlinx.coroutines.flow.map
import java.util.Date
import javax.inject.Inject
import javax.inject.Singleton


@Singleton
class SimpleOfflineProtocolTemplateRepository @Inject constructor(
    private val protocolTemplateDao: ProtocolTemplateDao,
    private val protocolApiService: ProtocolApiService // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
) : ProtocolTemplateRepository { // –†–µ–∞–ª–∏–∑—É–µ–º —Ç–≤–æ–π –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    companion object {
        private const val TAG = "OfflinePTemplateRepo"
    }

    override fun observeAllTemplates(): Flow<List<ProtocolTemplate>> {
        return protocolTemplateDao.getAllTemplates().map { entities ->
            entities.map { it.toDomainModel() }
        }
    }

    override suspend fun getAllTemplates(): List<ProtocolTemplate> {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–Ω–∞—á–∞–ª–∞ –∏–∑ DAO, –ø–æ—Ç–æ–º –ø–æ–ø—ã—Ç–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ DAO –ø—É—Å—Ç–æ
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ DAO
        refreshTemplates() // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        return protocolTemplateDao.getAllTemplates().map { entities -> // map –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω –µ—Å–ª–∏ getAllTemplates –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Flow
            entities.map { it.toDomainModel() }
        }.firstOrNull() ?: emptyList() // –ï—Å–ª–∏ getAllTemplates –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Flow<List>, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ .map
    }

    override suspend fun refreshTemplates(): Result<Unit> {
        Log.d(TAG, "üì° Refreshing protocol templates from server...")
        return try {
            val response = protocolApiService.getProtocolTemplates() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ —Ç–≤–æ–µ–≥–æ ProtocolApiService
            if (response.isSuccessful && response.body() != null) {
                val templateDtos = response.body()!!
                if (templateDtos.isNotEmpty()) {
                    val templateEntities = templateDtos.map { it.toEntity() }
                    protocolTemplateDao.insertTemplates(templateEntities)
                    Log.d(TAG, "‚úÖ Refreshed and saved ${templateEntities.size} templates to Room.")
                } else {
                    Log.d(TAG, "‚úÖ Server returned 0 templates. Local cache might be cleared if 'insertTemplates' handles empty list by deleting.")
                    // –ï—Å–ª–∏ insertTemplates –Ω–µ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –Ω—É–∂–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
                    // –ù–∞–ø—Ä–∏–º–µ—Ä, protocolTemplateDao.clearAllTemplates() –ø–µ—Ä–µ–¥ insertTemplates(emptyList())
                    // –ù–æ –æ–±—ã—á–Ω–æ OnConflictStrategy.REPLACE –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç.
                    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ:
                    // protocolTemplateDao.clearAllAndInsert(templateEntities) // –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ –≤ DAO
                    protocolTemplateDao.insertTemplates(emptyList()) // –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏, –∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º (–µ—Å–ª–∏ –±—ã –±—ã–ª –æ–¥–∏–Ω –º–µ—Ç–æ–¥ insertAllOrReplace)
                    // –õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ, –∞ –ª–æ–∫–∞–ª—å–Ω–æ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å
                }
                Result.success(Unit)
            } else {
                val errorMsg = "Error fetching templates: ${response.code()} - ${response.message()}"
                Log.w(TAG, "‚ùå $errorMsg")
                Result.failure(Exception(errorMsg))
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Network error refreshing templates: ${e.message}", e)
            Result.failure(e)
        }
    }

    override suspend fun getTemplateById(templateId: String): ProtocolTemplate? {
        return protocolTemplateDao.getTemplateById(templateId)?.toDomainModel()
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    }

    override fun searchTemplates(query: String): Flow<List<ProtocolTemplate>> {
        return protocolTemplateDao.searchTemplates(query).map { entities ->
            entities.map { it.toDomainModel() }
        }
    }

    // --- –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞–ø–ø–µ—Ä—ã ---
    private fun ProtocolTemplateEntity.toDomainModel(): ProtocolTemplate {
        return ProtocolTemplate(
            id = this.id,
            name = this.name,
            description = this.description ?: "", // –ï—Å–ª–∏ description –≤ Entity null, –∏—Å–ø–æ–ª—å–∑—É–µ–º ""
            complaints = this.complaintsTemplate ?: "",
            anamnesis = this.anamnesisTemplate ?: "",
            objectiveStatus = this.objectiveStatusTemplate ?: "",
            recommendations = this.recommendationsTemplate ?: "",
            requiredVitals = this.requiredVitals
        )
    }

    private fun ProtocolTemplateDto.toEntity(): ProtocolTemplateEntity {
        val currentDate = Date()
        return ProtocolTemplateEntity(
            id = this.id,
            name = this.name,
            description = this.description,
            complaintsTemplate = this.complaintsTemplate,
            anamnesisTemplate = this.anamnesisTemplate,
            objectiveStatusTemplate = this.objectiveStatusTemplate,
            recommendationsTemplate = this.recommendationsTemplate,
            requiredVitals = this.requiredVitals ?: emptyList(),
            createdAt = this.createdAt ?: currentDate, // –ï—Å–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ null
            updatedAt = this.updatedAt ?: currentDate  // –ï—Å–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ null
        )
    }
}