package com.example.medicalhomevisit.data.sync

import android.content.Context
import android.util.Log
import androidx.hilt.work.HiltWorker
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.example.medicalhomevisit.data.local.dao.PatientDao
import com.example.medicalhomevisit.data.remote.api.PatientApiService
import dagger.assisted.Assisted
import dagger.assisted.AssistedInject
import java.util.Date

@HiltWorker
class PatientSyncWorker @AssistedInject constructor(
    @Assisted context: Context,
    @Assisted workerParams: WorkerParameters,
    private val patientDao: PatientDao,
    private val apiService: PatientApiService
) : CoroutineWorker(context, workerParams) {

    companion object {
        private const val TAG = "PatientSyncWorker"
        const val WORK_NAME = "patient_sync_work"
    }

    override suspend fun doWork(): Result {
        Log.d(TAG, "üîÑ Starting patient synchronization...")

        return try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            val unsyncedPatients = patientDao.getUnsyncedPatients()
            Log.d(TAG, "üìù Found ${unsyncedPatients.size} unsynced patients")

            var successCount = 0
            var failCount = 0

            for (patient in unsyncedPatients) {
                try {
                    when (patient.syncAction) {
                        "UPDATE" -> {
                            // –ü–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ UPDATE –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ updateMyProfile
                            // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                            Log.d(TAG, "‚è≠Ô∏è Patient UPDATE sync not fully implemented yet for ${patient.id}")

                            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                            patientDao.markAsSynced(patient.id)
                            successCount++
                        }
                        "CREATE" -> {
                            Log.d(TAG, "‚è≠Ô∏è Patient CREATE sync not implemented yet for ${patient.id}")
                            successCount++ // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                        }
                        "DELETE" -> {
                            Log.d(TAG, "‚è≠Ô∏è Patient DELETE sync not implemented yet for ${patient.id}")
                            successCount++ // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                        }
                        else -> {
                            Log.w(TAG, "ü§∑ Unknown sync action: ${patient.syncAction} for ${patient.id}")
                            patientDao.updateLastSyncAttempt(patient.id, Date())
                            failCount++
                        }
                    }
                } catch (e: Exception) {
                    patientDao.updateLastSyncAttempt(patient.id, Date())
                    failCount++
                    Log.e(TAG, "‚ùå Error syncing patient ${patient.id}: ${e.message}")
                }
            }

            Log.d(TAG, "üèÅ Patient sync completed: $successCount success, $failCount failed")

            if (failCount == 0) {
                Result.success()
            } else if (successCount > 0) {
                // –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ - –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                Result.retry()
            } else {
                // –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª - –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
                Result.failure()
            }

        } catch (e: Exception) {
            Log.e(TAG, "üí• Patient sync worker failed: ${e.message}", e)
            Result.failure()
        }
    }
}