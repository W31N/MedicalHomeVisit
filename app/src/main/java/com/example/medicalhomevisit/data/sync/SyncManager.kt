package com.example.medicalhomevisit.data.sync

import android.content.Context
import android.util.Log
import androidx.work.*
import dagger.hilt.android.qualifiers.ApplicationContext
import java.util.concurrent.TimeUnit
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class SyncManager @Inject constructor(
    @ApplicationContext private val context: Context
) {
    private val workManager = WorkManager.getInstance(context)

    companion object {
        private const val TAG = "SyncManager"
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    fun syncNow() {
        Log.d(TAG, "üöÄ Starting immediate sync...")

        val syncRequest = OneTimeWorkRequestBuilder<VisitSyncWorker>()
            .setConstraints(
                Constraints.Builder()
                    .setRequiredNetworkType(NetworkType.CONNECTED)
                    .build()
            )
            .build()

        workManager.enqueueUniqueWork(
            VisitSyncWorker.WORK_NAME,
            ExistingWorkPolicy.REPLACE,
            syncRequest
        )
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    fun setupPeriodicSync() {
        Log.d(TAG, "‚öôÔ∏è Setting up periodic sync...")

        val periodicSyncRequest = PeriodicWorkRequestBuilder<VisitSyncWorker>(
            15, TimeUnit.MINUTES // –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        )
            .setConstraints(
                Constraints.Builder()
                    .setRequiredNetworkType(NetworkType.CONNECTED)
                    .setRequiresBatteryNotLow(true)
                    .build()
            )
            .build()

        workManager.enqueueUniquePeriodicWork(
            "${VisitSyncWorker.WORK_NAME}_periodic",
            ExistingPeriodicWorkPolicy.KEEP,
            periodicSyncRequest
        )
    }

    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    fun cancelSync() {
        Log.d(TAG, "‚ùå Cancelling all sync work...")
        workManager.cancelUniqueWork(VisitSyncWorker.WORK_NAME)
        workManager.cancelUniqueWork("${VisitSyncWorker.WORK_NAME}_periodic")
    }
}