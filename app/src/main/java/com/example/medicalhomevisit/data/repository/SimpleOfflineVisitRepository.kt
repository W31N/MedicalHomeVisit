package com.example.medicalhomevisit.data.repository

import android.util.Log
import com.example.medicalhomevisit.data.local.dao.VisitDao
import com.example.medicalhomevisit.data.local.entity.VisitEntity
import com.example.medicalhomevisit.data.remote.api.VisitApiService
import com.example.medicalhomevisit.data.remote.dto.VisitDto
import com.example.medicalhomevisit.data.remote.dto.VisitStatusUpdateRequest
import com.example.medicalhomevisit.domain.model.Visit
import com.example.medicalhomevisit.domain.model.VisitStatus
import com.example.medicalhomevisit.domain.repository.AuthRepository
import com.example.medicalhomevisit.domain.repository.VisitRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flatMapLatest
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.flow.map
import java.util.Date
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class SimpleOfflineVisitRepository @Inject constructor(
    private val visitDao: VisitDao,
    private val apiService: VisitApiService,
    private val authRepository: AuthRepository
) : VisitRepository {

    companion object {
        private const val TAG = "SimpleOfflineVisitRepo"
    }

    override suspend fun getVisitsForStaff(staffId: String): List<Visit> {
        Log.d(TAG, "üîç Getting visits for staff: $staffId")

        // 1. –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ Room
        val localVisits = visitDao.getVisitsForStaffSync(staffId)
        Log.d(TAG, "üì± Found ${localVisits.size} visits in Room")

        // 2. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (localVisits.isEmpty()) {
            Log.d(TAG, "üì° No local data, loading from server...")
            try {
                val response = apiService.getMyVisits()
                if (response.isSuccessful) {
                    val visitDtos = response.body() ?: emptyList()
                    Log.d(TAG, "‚úÖ Server returned ${visitDtos.size} visits")

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Room
                    val entities = visitDtos.map { dto -> convertDtoToEntity(dto) }
                    visitDao.insertVisits(entities)
                    Log.d(TAG, "üíæ Saved ${entities.size} visits to Room")

                    return entities.map { convertEntityToDomain(it) }
                } else {
                    Log.e(TAG, "‚ùå Server error: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Network error: ${e.message}")
            }
        }

        // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Room
        val finalVisits = visitDao.getVisitsForStaffSync(staffId)
        Log.d(TAG, "üìã Returning ${finalVisits.size} visits from Room")
        return finalVisits.map { convertEntityToDomain(it) }
    }

    override suspend fun updateVisitStatus(visitId: String, newStatus: VisitStatus) {
        Log.d(TAG, "üîÑ Updating visit status: $visitId -> $newStatus")

        // 1. –°–ù–ê–ß–ê–õ–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Room
        visitDao.updateVisitStatus(visitId, newStatus.name)
        Log.d(TAG, "‚úÖ Updated status in Room")

        // 2. –ü–û–¢–û–ú –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        try {
            val request = VisitStatusUpdateRequest(newStatus.name)
            val response = apiService.updateVisitStatus(visitId, request)

            if (response.isSuccessful) {
                Log.d(TAG, "‚úÖ Synced status to server")
                // TODO: –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            } else {
                Log.w(TAG, "‚ùå Server sync failed: ${response.code()}")
            }
        } catch (e: Exception) {
            Log.w(TAG, "‚ùå Network sync failed: ${e.message}")
            // –î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ Room, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
        }
    }

    override fun observeVisits(): Flow<List<Visit>> {
        return authRepository.currentUser.flatMapLatest { user ->
            val userId = user?.id ?: ""
            if (userId.isNotEmpty()) {
                visitDao.getVisitsForStaff(userId)
                    .map { entities -> entities.map { convertEntityToDomain(it) } }
            } else {
                flowOf(emptyList())
            }
        }
    }

    // üîÑ –ú–ê–ü–ü–ï–†–´
    private fun convertDtoToEntity(dto: VisitDto): VisitEntity {
        return VisitEntity(
            id = dto.id,
            patientId = dto.patientId,
            scheduledTime = dto.scheduledTime,
            status = dto.status,
            address = dto.address,
            reasonForVisit = dto.reasonForVisit,
            notes = dto.notes ?: "",
            assignedStaffId = dto.assignedStaffId,
            assignedStaffName = dto.assignedStaffName,
            actualStartTime = dto.actualStartTime,
            actualEndTime = dto.actualEndTime,
            createdAt = dto.createdAt,
            updatedAt = dto.updatedAt,
            isFromRequest = true,
            originalRequestId = null,
            isSynced = true, // –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
            syncAction = null
        )
    }

    private fun convertEntityToDomain(entity: VisitEntity): Visit {
        return Visit(
            id = entity.id,
            patientId = entity.patientId,
            scheduledTime = entity.scheduledTime,
            status = try {
                VisitStatus.valueOf(entity.status)
            } catch (e: Exception) {
                VisitStatus.PLANNED
            },
            address = entity.address,
            reasonForVisit = entity.reasonForVisit,
            notes = entity.notes,
            assignedStaffId = entity.assignedStaffId,
            assignedStaffName = entity.assignedStaffName,
            actualStartTime = entity.actualStartTime,
            actualEndTime = entity.actualEndTime,
            createdAt = entity.createdAt,
            updatedAt = entity.updatedAt,
            isFromRequest = entity.isFromRequest,
            originalRequestId = entity.originalRequestId
        )
    }

    private fun getCurrentUserId(): String {
        // Flow –Ω–µ –∏–º–µ–µ—Ç .value, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
        // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ savedStateHandle –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        return "current-user-id" // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø–æ–ª—É—á–∞—Ç—å userId –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
    private suspend fun getCurrentUserIdSafe(): String {
        return try {
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Flow - –∏—Å–ø–æ–ª—å–∑—É–µ–º first()
            // authRepository.currentUser.first()?.id ?: ""
            "current-user-id" // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        } catch (e: Exception) {
            Log.w(TAG, "Failed to get current user ID: ${e.message}")
            ""
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    override suspend fun getVisitsForToday(): List<Visit> {
        return getVisitsForStaff(getCurrentUserId())
    }

    override suspend fun getVisitsForDate(date: Date): List<Visit> {
        return getVisitsForStaff(getCurrentUserId()) // –£–ø—Ä–æ—â–µ–Ω–Ω–æ
    }

    override suspend fun getVisitById(visitId: String): Visit {
        val entity = visitDao.getVisitById(visitId)
        return entity?.let { convertEntityToDomain(it) }
            ?: throw Exception("Visit not found")
    }

    override suspend fun updateVisitNotes(visitId: String, notes: String) {
        // TODO: —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    }

    override suspend fun updateScheduledTime(visitId: String, scheduledTime: Date) {
        // TODO: —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    }

    override suspend fun updateVisit(visit: Visit): Visit {
        // TODO: —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
        return visit
    }

    override suspend fun addUnplannedVisit(visit: Visit): Visit {
        // TODO: —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
        return visit
    }

    override suspend fun getVisitHistoryForPatient(patientId: String): List<Visit> {
        return emptyList() // TODO: —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    }

    override suspend fun cacheVisits(visits: List<Visit>) {
        // TODO: —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    }

    override suspend fun getCachedVisits(): List<Visit> {
        return emptyList() // TODO: —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    }

    override suspend fun syncVisits(): Result<List<Visit>> {
        return Result.success(emptyList()) // TODO: —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    }
}