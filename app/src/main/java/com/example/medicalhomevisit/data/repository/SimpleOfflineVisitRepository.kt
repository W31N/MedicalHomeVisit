package com.example.medicalhomevisit.data.repository

import android.util.Log
import com.example.medicalhomevisit.data.local.dao.VisitDao
import com.example.medicalhomevisit.data.local.entity.VisitEntity
import com.example.medicalhomevisit.data.remote.api.VisitApiService
import com.example.medicalhomevisit.data.remote.dto.VisitDto
import com.example.medicalhomevisit.data.sync.SyncManager
import com.example.medicalhomevisit.domain.model.Visit
import com.example.medicalhomevisit.domain.model.VisitStatus
import com.example.medicalhomevisit.domain.repository.AuthRepository
import com.example.medicalhomevisit.domain.repository.PatientRepository
import com.example.medicalhomevisit.domain.repository.VisitRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.flatMapLatest
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.flow.map
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class SimpleOfflineVisitRepository @Inject constructor(
    private val visitDao: VisitDao,
    private val apiService: VisitApiService,
    private val authRepository: AuthRepository,
    private val syncManager: SyncManager,
    private val patientRepository: PatientRepository
) : VisitRepository {

    companion object {
        private const val TAG = "OfflineVisitRepo"
    }

    // üîë –ü–æ–ª—É—á–∞–µ–º medicalPersonId —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private suspend fun getCurrentMedicalPersonId(): String? {
        return try {
            authRepository.currentUser.first()?.medicalPersonId
        } catch (e: Exception) {
            Log.w(TAG, "Failed to get current user's medicalPersonId: ${e.message}")
            null
        }
    }

    // üîÑ OFFLINE-FIRST: –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Room
    override fun observeVisits(): Flow<List<Visit>> {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º flatMapLatest –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–º–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ _currentUserFlow –≤ AuthRepository —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
        // –∏–ª–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ medicalPersonId, –µ—Å–ª–∏ –±—ã –æ–Ω –±—ã–ª –≤ Flow.
        // –¢–∞–∫ –∫–∞–∫ medicalPersonId —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å User, —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ user.
        return authRepository.currentUser.flatMapLatest { user ->
            val medicalId = user?.medicalPersonId // –ü–æ–ª—É—á–∞–µ–º medicalPersonId
            if (!medicalId.isNullOrEmpty()) {
                Log.d(TAG, "üîÑ Observing visits for medicalPersonId: $medicalId (User ID: ${user.id})")
                visitDao.getVisitsForStaff(medicalId) // –ò—Å–ø–æ–ª—å–∑—É–µ–º medicalPersonId –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                    .map { entities -> entities.map { convertEntityToDomain(it) } }
            } else {
                Log.d(TAG, "üîÑ No medicalPersonId for user ${user?.id}, returning empty flow for observeVisits")
                flowOf(emptyList())
            }
        }
    }

    suspend fun getUnsyncedCount(): Int {
        return try {
            visitDao.getUnsyncedCount()
        } catch (e: Exception) {
            Log.w(TAG, "Error getting unsynced count: ${e.message}")
            0
        }
    }

    // üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    suspend fun getUnsyncedVisits(): List<Visit> {
        return try {
            val entities = visitDao.getUnsyncedVisits()
            entities.map { convertEntityToDomain(it) }
        } catch (e: Exception) {
            Log.w(TAG, "Error getting unsynced visits: ${e.message}")
            emptyList()
        }
    }

    // üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–∑–∏—Ç–∞
    suspend fun syncVisit(visitId: String): Result<Unit> {
        return try {
            val entity = visitDao.getVisitById(visitId)
            if (entity != null && !entity.isSynced) {
                when (entity.syncAction) {
                    "UPDATE" -> {
                        // –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å
                        val request = com.example.medicalhomevisit.data.remote.dto.VisitStatusUpdateRequest(entity.status)
                        val response = apiService.updateVisitStatus(entity.id, request)

                        if (response.isSuccessful) {
                            visitDao.markAsSynced(entity.id)
                            Log.d(TAG, "‚úÖ Visit $visitId synced successfully")
                            Result.success(Unit)
                        } else {
                            visitDao.updateLastSyncAttempt(entity.id, Date())
                            Result.failure(Exception("Server error: ${response.code()}"))
                        }
                    }
                    else -> {
                        Result.failure(Exception("Unsupported sync action: ${entity.syncAction}"))
                    }
                }
            } else {
                Result.success(Unit) // –£–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error syncing visit $visitId: ${e.message}", e)
            Result.failure(e)
        }
    }

    // üîÑ OFFLINE-FIRST: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Room, –æ–±–Ω–æ–≤–ª—è–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
    // –ü–∞—Ä–∞–º–µ—Ç—Ä staffId –∑–¥–µ—Å—å - —ç—Ç–æ UserEntity.id, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç ViewModel.
    // –ù–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å medicalPersonId —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Room.
    override suspend fun getVisitsForStaff(staffId: String): List<Visit> {
        // `staffId` (UserEntity.id) –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∫—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª,
        // –¥–ª—è "–º–æ–∏—Ö –≤–∏–∑–∏—Ç–æ–≤" –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º medicalPersonId —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞.
        val medicalIdToQuery = getCurrentMedicalPersonId()

        if (medicalIdToQuery.isNullOrEmpty()) {
            Log.w(TAG, "üîç No medicalPersonId for current user (called with staffId: $staffId). Returning empty list.")
            tryLoadFromServer() // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞, —Ç.–∫. —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω
            return emptyList()
        }

        Log.d(TAG, "üîç Getting visits for medicalPersonId: $medicalIdToQuery (requested by user with UserEntity.id: $staffId)")

        // 1. –í–°–ï–ì–î–ê —Å–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Room –∏—Å–ø–æ–ª—å–∑—É—è medicalPersonId
        val localVisits = visitDao.getVisitsForStaffSync(medicalIdToQuery)
        Log.d(TAG, "üì± Found ${localVisits.size} visits in Room for medicalPersonId: $medicalIdToQuery")

        // 2. –í —Ñ–æ–Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ (—Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        tryLoadFromServer() // –£–¥–∞–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä staffId, —Ç.–∫. –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤ getMyVisits

        // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return localVisits.map { convertEntityToDomain(it) }
    }

    // üîÑ OFFLINE-FIRST: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è –¥–∞—Ç—ã
    override suspend fun getVisitsForDate(date: Date): List<Visit> {
        val medicalIdToQuery = getCurrentMedicalPersonId()

        if (medicalIdToQuery.isNullOrEmpty()) {
            Log.w(TAG, "üîç No medicalPersonId for current user. Cannot effectively filter visits for date by staff from Room.")
            tryLoadFromServerForDate(date) // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞, –º–æ–∂–µ—Ç —Ç–∞–º —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç
            return emptyList() // –ò–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ, –∞ ViewModel —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç? –ü–æ–∫–∞ —Ç–∞–∫.
        }
        Log.d(TAG, "üîç Getting visits for date $date for medicalPersonId: $medicalIdToQuery")

        // 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        tryLoadFromServerForDate(date) // –£–¥–∞–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä userId

        // 2. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ Room –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ medicalPersonId.
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ ViewModel –∏–ª–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DAO, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å.
        // –¢–µ–∫—É—â–∏–π getVisitsForStaffSync –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –¥–∞—Ç–µ.
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ Room, –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –≤ DAO.
        // –ü–æ–∫–∞ —á—Ç–æ, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∞ ViewModel —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –¥–∞—Ç–µ.
        val localVisits = visitDao.getVisitsForStaffSync(medicalIdToQuery)
        Log.d(TAG, "üì± Returning ${localVisits.size} visits from Room for medicalPersonId: $medicalIdToQuery (date filtering in ViewModel)")

        return localVisits.map { convertEntityToDomain(it) }
    }

    // ... updateVisitStatus, updateVisitNotes, getVisitById –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    override suspend fun updateVisitStatus(visitId: String, newStatus: VisitStatus) {
        Log.d(TAG, "üîÑ Updating visit status: $visitId -> $newStatus")
        visitDao.updateVisitStatus(visitId, newStatus.name)
        Log.d(TAG, "‚úÖ Updated status in Room, marked as unsynced")
        syncManager.syncNow()
    }

    override suspend fun updateVisitNotes(visitId: String, notes: String) {
        Log.d(TAG, "üîÑ Updating visit notes: $visitId")
        visitDao.updateVisitNotes(visitId, notes)
        Log.d(TAG, "‚úÖ Updated notes in Room, marked as unsynced")
        syncManager.syncNow()
    }

    override suspend fun getVisitById(visitId: String): Visit {
        val entity = visitDao.getVisitById(visitId)
        return entity?.let { convertEntityToDomain(it) }
            ?: throw Exception("Visit not found for id: $visitId")
    }

    // üì° –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–ï–†–í–ï–†–û–ú

    private suspend fun tryLoadFromServer() {
        try {
            Log.d(TAG, "üì° Trying to load from server (getMyVisits)...")
            val response = apiService.getMyVisits() // –°–µ—Ä–≤–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É

            if (response.isSuccessful) {
                val visitDtos = response.body() ?: emptyList()
                Log.d(TAG, "‚úÖ Server returned ${visitDtos.size} visits")
                val entities = visitDtos.map { dto ->
                    // dto.assignedStaffId —ç—Ç–æ MedicalPerson.id, —á—Ç–æ VisitEntity.assignedStaffId –∏ –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å
                    convertDtoToEntity(dto, isSynced = true)
                }
                visitDao.insertVisits(entities)
                Log.d(TAG, "üíæ Saved ${entities.size} visits to Room")
            } else {
                Log.w(TAG, "‚ùå Server error on getMyVisits: ${response.code()} - ${response.message()}")
            }
        } catch (e: Exception) {
            Log.w(TAG, "‚ùå Network error on getMyVisits: ${e.message}")
        }
    }

    // –£–¥–∞–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä userId
    private suspend fun tryLoadFromServerForDate(date: Date) {
        try {
            Log.d(TAG, "üì° Trying to load from server for date $date...")
            // –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º —Å–µ—Ä–≤–µ—Ä–∞
            val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
            val dateString = dateFormat.format(date)
            val response = apiService.getMyVisitsForDate(dateString) // –°–µ—Ä–≤–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É

            if (response.isSuccessful) {
                val visitDtos = response.body() ?: emptyList()
                Log.d(TAG, "‚úÖ Server returned ${visitDtos.size} visits for date $dateString")
                val entities = visitDtos.map { dto ->
                    convertDtoToEntity(dto, isSynced = true)
                }
                visitDao.insertVisits(entities) // –ò—Å–ø–æ–ª—å–∑—É–µ–º insertVisits –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                Log.d(TAG, "üíæ Saved ${entities.size} visits to Room for date $dateString")
            } else {
                Log.w(TAG, "‚ùå Server error for date $dateString: ${response.code()} - ${response.message()}")
            }
        } catch (e: Exception) {
            Log.w(TAG, "‚ùå Network error for date $date: ${e.message}")
        }
    }

//    private suspend fun getCurrentUserId(): String {
//        return try {
//            authRepository.currentUser.first()?.id ?: ""
//        } catch (e: Exception) {
//            Log.w(TAG, "Failed to get current user ID: ${e.message}")
//            ""
//        }
//    }

    // üîÑ –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ò –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø

    // üîÑ –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ò –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø
    override suspend fun syncVisits(): Result<List<Visit>> {
        return try {
            Log.d(TAG, "üîÑ Manual sync requested by user")
            syncManager.syncNow() // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é WorkManager

            // –ü–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Room –¥–ª—è medicalPersonId
            val medicalId = getCurrentMedicalPersonId()
            if (!medicalId.isNullOrEmpty()) {
                val localVisits = visitDao.getVisitsForStaffSync(medicalId)
                Result.success(localVisits.map { convertEntityToDomain(it) })
            } else {
                Log.w(TAG, "Cannot fetch visits for sync: medicalPersonId is null")
                Result.success(emptyList()) // –∏–ª–∏ Result.failure, –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Manual sync trigger failed: ${e.message}")
            Result.failure(e)
        }
    }

    override suspend fun cacheVisits(visits: List<Visit>) {
        val entities = visits.map { visit ->
            // –ü—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –º—ã —É–∂–µ –∏–º–µ–µ–º domain model Visit,
            // –≤ –∫–æ—Ç–æ—Ä–æ–º visit.assignedStaffId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MedicalPerson.id
            convertDomainToEntity(visit, isSynced = true)
        }
        visitDao.insertVisits(entities)
        Log.d(TAG, "üíæ Cached ${entities.size} visits")
    }

    override suspend fun getCachedVisits(): List<Visit> {
        val medicalId = getCurrentMedicalPersonId()
        if (!medicalId.isNullOrEmpty()) {
            val entities = visitDao.getVisitsForStaffSync(medicalId)
            return entities.map { convertEntityToDomain(it) }
        }
        return emptyList()
    }

    // üìä –ú–ï–¢–û–î–´ –ù–ï –¢–†–ï–ë–£–Æ–©–ò–ï –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú–ê (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏)

    override suspend fun getVisitsForToday(): List<Visit> {
        return getVisitsForDate(Date())
    }

    override suspend fun updateScheduledTime(visitId: String, scheduledTime: Date) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å offline –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        Log.w(TAG, "updateScheduledTime not implemented yet")
    }

    override suspend fun updateVisit(visit: Visit): Visit {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å offline –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        Log.w(TAG, "updateVisit not implemented yet")
        return visit
    }

    override suspend fun addUnplannedVisit(visit: Visit): Visit {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å offline –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        Log.w(TAG, "addUnplannedVisit not implemented yet")
        return visit
    }

    override suspend fun getVisitHistoryForPatient(patientId: String): List<Visit> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å offline –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        Log.w(TAG, "getVisitHistoryForPatient not implemented yet")
        return emptyList()
    }

    // üîÑ –ö–û–ù–í–ï–†–¢–ï–†–´

    private fun convertDtoToEntity(dto: VisitDto, isSynced: Boolean = false): VisitEntity {
        return VisitEntity(
            id = dto.id,
            patientId = dto.patientId,
            scheduledTime = dto.scheduledTime,
            status = dto.status,
            address = dto.address,
            reasonForVisit = dto.reasonForVisit,
            notes = dto.notes ?: "",
            assignedStaffId = dto.assignedStaffId,
            assignedStaffName = dto.assignedStaffName,
            actualStartTime = dto.actualStartTime,
            actualEndTime = dto.actualEndTime,
            createdAt = dto.createdAt,
            updatedAt = dto.updatedAt,
            isFromRequest = true,
            originalRequestId = null,
            isSynced = isSynced,
            syncAction = null
        )
    }

    private fun convertEntityToDomain(entity: VisitEntity): Visit {
        return Visit(
            id = entity.id,
            patientId = entity.patientId,
            scheduledTime = entity.scheduledTime,
            status = try {
                VisitStatus.valueOf(entity.status)
            } catch (e: Exception) {
                VisitStatus.PLANNED
            },
            address = entity.address,
            reasonForVisit = entity.reasonForVisit,
            notes = entity.notes,
            assignedStaffId = entity.assignedStaffId,
            assignedStaffName = entity.assignedStaffName,
            actualStartTime = entity.actualStartTime,
            actualEndTime = entity.actualEndTime,
            createdAt = entity.createdAt,
            updatedAt = entity.updatedAt,
            isFromRequest = entity.isFromRequest,
            originalRequestId = entity.originalRequestId
        )
    }

    private fun convertDomainToEntity(visit: Visit, isSynced: Boolean): VisitEntity {
        return VisitEntity(
            id = visit.id,
            patientId = visit.patientId,
            scheduledTime = visit.scheduledTime,
            status = visit.status.name,
            address = visit.address,
            reasonForVisit = visit.reasonForVisit,
            notes = visit.notes,
            assignedStaffId = visit.assignedStaffId,
            assignedStaffName = visit.assignedStaffName,
            actualStartTime = visit.actualStartTime,
            actualEndTime = visit.actualEndTime,
            createdAt = visit.createdAt,
            updatedAt = visit.updatedAt,
            isFromRequest = visit.isFromRequest,
            originalRequestId = visit.originalRequestId,
            isSynced = isSynced,
            syncAction = null
        )
    }
}