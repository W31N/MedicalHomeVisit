package com.example.medicalhomevisit.presentation.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.medicalhomevisit.data.repository.SimpleOfflineVisitRepository
import com.example.medicalhomevisit.data.sync.SyncManager
import com.example.medicalhomevisit.domain.model.Visit
import com.example.medicalhomevisit.domain.model.VisitStatus
import com.example.medicalhomevisit.domain.repository.AuthRepository
import com.example.medicalhomevisit.domain.repository.VisitRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.util.Calendar
import java.util.Date
import javax.inject.Inject

@HiltViewModel
class VisitListViewModel @Inject constructor(
    private val visitRepository: VisitRepository,
    private val authRepository: AuthRepository,
    private val syncManager: SyncManager
) : ViewModel() {

    companion object {
        private const val TAG = "VisitListViewModel"
    }

    // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private val _uiState = MutableStateFlow<VisitListUiState>(VisitListUiState.Loading)
    val uiState: StateFlow<VisitListUiState> = _uiState.asStateFlow()

    // –§–ª–∞–≥ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
    private val _isOffline = MutableStateFlow(false)
    val isOffline: StateFlow<Boolean> = _isOffline.asStateFlow()

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    private val _filterParams = MutableStateFlow(FilterParams())
    val filterParams: StateFlow<FilterParams> = _filterParams.asStateFlow()

    // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    private val _allVisits = MutableStateFlow<List<Visit>>(emptyList())

    // –¢–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    private val _searchQuery = MutableStateFlow("")
    val searchQuery: StateFlow<String> = _searchQuery.asStateFlow()

    // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private var currentUserId: String? = null

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    private var hasTriedInitialLoad = false

    init {
        viewModelScope.launch {
            authRepository.currentUser.collectLatest { user ->
                currentUserId = user?.id
                if (currentUserId != null) {
                    loadVisits()
                    observeVisits()
                    syncManager.setupPeriodicSync()
                } else {
                    _allVisits.value = emptyList()
                    _uiState.value = VisitListUiState.Empty
                }
            }
        }
    }

    private fun observeVisits() {
        viewModelScope.launch {
            try {
                visitRepository.observeVisits().collectLatest { allVisits ->
                    Log.d(TAG, "üì± Received ${allVisits.size} visits from Room")
                    _allVisits.value = allVisits
                    applyFilters()

                    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
                    // –ï—Å–ª–∏ –º—ã –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ –∏—Ö - –∑–Ω–∞—á–∏—Ç –Ω–µ –æ—Ñ–ª–∞–π–Ω
                    if (hasTriedInitialLoad && allVisits.isNotEmpty()) {
                        _isOffline.value = false
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error observing visits: ${e.message}", e)
                _uiState.value = VisitListUiState.Error(e.message ?: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            }
        }
    }

    fun loadVisits() {
        val userId = currentUserId ?: return

        viewModelScope.launch {
            _uiState.value = VisitListUiState.Loading
            hasTriedInitialLoad = true

            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
                val visits = visitRepository.getVisitsForStaff(userId)
                Log.d(TAG, "üì± Initial load: ${visits.size} visits")

                _allVisits.value = visits
                applyFilters()

                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - –º—ã –æ–Ω–ª–∞–π–Ω
                _isOffline.value = false

            } catch (e: Exception) {
                Log.e(TAG, "Error in loadVisits: ${e.message}", e)

                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ = –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
                _isOffline.value = true

                // –ï—Å–ª–∏ –≤ Room –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                if (_allVisits.value.isEmpty()) {
                    _uiState.value = VisitListUiState.Error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
                } else {
                    // –£ –Ω–∞—Å –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    applyFilters()
                }
            }
        }
    }

    // üîÑ –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    fun syncVisits() {
        viewModelScope.launch {
            try {
                Log.d(TAG, "üîÑ Manual sync requested")

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                _isOffline.value = false

                syncManager.syncNow()

                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                loadVisits()

            } catch (e: Exception) {
                Log.e(TAG, "Error syncing visits: ${e.message}", e)
                _isOffline.value = true
            }
        }
    }

    // üîÑ –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω)
    fun updateSelectedDate(date: Date) {
        _filterParams.update { it.copy(selectedDate = date) }
        applyFilters() // <--- –î–û–ë–ê–í–¨ –≠–¢–û–¢ –í–´–ó–û–í –ó–î–ï–°–¨

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)
        // –≠—Ç–∞ –∫–æ—Ä—É—Ç–∏–Ω–∞ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        viewModelScope.launch {
            try {
                visitRepository.getVisitsForDate(date) // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã
                _isOffline.value = false
                // –ï—Å–ª–∏ observeVisits() —Å—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Room –ø–æ—Å–ª–µ getVisitsForDate,
                // –æ–Ω —Å–Ω–æ–≤–∞ –≤—ã–∑–æ–≤–µ—Ç applyFilters(), —á—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å.
            } catch (e: Exception) {
                Log.w(TAG, "Error loading visits for date: ${e.message}")
                _isOffline.value = true
                // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ applyFilters() –±—ã–ª –≤—ã–∑–≤–∞–Ω –≤—ã—à–µ, —Ç–∞–∫ —á—Ç–æ –∑–¥–µ—Å—å –æ–Ω —É–∂–µ –Ω–µ —Ç–∞–∫ –∫—Ä–∏—Ç–∏—á–µ–Ω.
                // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è UI –ø—Ä–∏ –æ—à–∏–±–∫–µ,
                // –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.
                // –î–ª—è —á–∏—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–∑–≤–∞–Ω –±–µ–∑—É—Å–ª–æ–≤–Ω–æ –≤—ã—à–µ, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å.
                // applyFilters() // –ù–∞–ø—Ä–∏–º–µ—Ä, —É–±—Ä–∞—Ç—å –æ—Ç—Å—é–¥–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤—ã—à–µ.
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞
    fun updateSelectedStatus(status: VisitStatus?) {
        _filterParams.update { it.copy(selectedStatus = status) }
        applyFilters()
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    fun updateGroupingType(type: GroupingType) {
        _filterParams.update { it.copy(groupingType = type) }
        applyFilters()
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    fun updateSearchQuery(query: String) {
        _searchQuery.value = query
        applyFilters()
    }


    private fun applyFilters() {
        val filteredVisits = _allVisits.value.filter { visit ->
            val visitDate = Calendar.getInstance().apply { time = visit.scheduledTime }
            val selectedDate = Calendar.getInstance().apply { time = _filterParams.value.selectedDate }
            val sameDay = visitDate.get(Calendar.YEAR) == selectedDate.get(Calendar.YEAR) &&
                    visitDate.get(Calendar.DAY_OF_YEAR) == selectedDate.get(Calendar.DAY_OF_YEAR)

            // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            val statusMatches = _filterParams.value.selectedStatus == null ||
                    visit.status == _filterParams.value.selectedStatus

            // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            val searchMatches = _searchQuery.value.isEmpty() ||
                    visit.address.contains(_searchQuery.value, ignoreCase = true) ||
                    visit.reasonForVisit.contains(_searchQuery.value, ignoreCase = true)

            sameDay && statusMatches && searchMatches
        }

        Log.d(TAG, "üîç Filtered ${filteredVisits.size} visits from ${_allVisits.value.size} total")

        // –û–±–Ω–æ–≤–ª—è–µ–º UI-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
        _uiState.value = if (filteredVisits.isEmpty()) {
            if (_allVisits.value.isEmpty() && _isOffline.value) {
                VisitListUiState.Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
            } else {
                VisitListUiState.Empty
            }
        } else {
            VisitListUiState.Success(filteredVisits)
        }
    }

    // üîÑ –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω
    fun updateVisitStatus(visitId: String, newStatus: VisitStatus) {
        viewModelScope.launch {
            try {
                // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º Room, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–∑–∂–µ
                visitRepository.updateVisitStatus(visitId, newStatus)
                Log.d(TAG, "‚úÖ Visit status updated: $visitId -> $newStatus")

                // UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ observeVisits()

            } catch (e: Exception) {
                Log.e(TAG, "Error updating visit status: ${e.message}", e)
                // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            }
        }
    }

    // üîÑ –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω
    fun updateVisitNotes(visitId: String, notes: String) {
        viewModelScope.launch {
            try {
                visitRepository.updateVisitNotes(visitId, notes)
                Log.d(TAG, "‚úÖ Visit notes updated: $visitId")

                // UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ observeVisits()

            } catch (e: Exception) {
                Log.e(TAG, "Error updating visit notes: ${e.message}", e)
            }
        }
    }

    fun startVisit(visitId: String) {
        updateVisitStatus(visitId, VisitStatus.IN_PROGRESS)
    }

    fun completeVisit(visitId: String) {
        updateVisitStatus(visitId, VisitStatus.COMPLETED)
    }

    fun checkSyncStatus() {
        viewModelScope.launch {
            try {
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                val unsyncedCount = (visitRepository as? SimpleOfflineVisitRepository)?.getUnsyncedCount() ?: 0

                // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                if (unsyncedCount > 0 && !_isOffline.value) {
                    Log.d(TAG, "üìä Found $unsyncedCount unsynced visits")
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
                }

            } catch (e: Exception) {
                Log.w(TAG, "Error checking sync status: ${e.message}")
            }
        }
    }

    // üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    fun getSyncStats() {
        viewModelScope.launch {
            try {
                val repo = visitRepository as? SimpleOfflineVisitRepository
                if (repo != null) {
                    val unsyncedCount = repo.getUnsyncedCount()
                    val unsyncedVisits = repo.getUnsyncedVisits()

                    Log.d(TAG, "üìä SYNC STATS:")
                    Log.d(TAG, "   - Total visits: ${_allVisits.value.size}")
                    Log.d(TAG, "   - Unsynced count: $unsyncedCount")
                    Log.d(TAG, "   - Unsynced visits: ${unsyncedVisits.map { it.id }}")
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error getting sync stats: ${e.message}")
            }
        }
    }
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
data class FilterParams(
    val selectedDate: Date = Calendar.getInstance().time,
    val selectedStatus: VisitStatus? = null,
    val groupingType: GroupingType = GroupingType.TIME
)

// –¢–∏–ø—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤–∏–∑–∏—Ç–æ–≤
enum class GroupingType {
    NONE,      // –ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    TIME,      // –ü–æ –≤—Ä–µ–º–µ–Ω–∏ (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä)
    STATUS,    // –ü–æ —Å—Ç–∞—Ç—É—Å—É
    ADDRESS    // –ü–æ —Ä–∞–π–æ–Ω—É/–∞–¥—Ä–µ—Å—É
}

sealed class VisitListUiState {
    object Loading : VisitListUiState()
    object Empty : VisitListUiState()
    data class Success(val visits: List<Visit>) : VisitListUiState()
    data class Error(val message: String) : VisitListUiState()
}