package com.example.medicalhomevisit.presentation.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.medicalhomevisit.data.sync.SyncManager
import com.example.medicalhomevisit.domain.model.Visit
import com.example.medicalhomevisit.domain.model.VisitStatus
import com.example.medicalhomevisit.domain.repository.AuthRepository
import com.example.medicalhomevisit.domain.repository.VisitRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.util.Calendar
import java.util.Date
import javax.inject.Inject

@HiltViewModel
class VisitListViewModel @Inject constructor(
    private val visitRepository: VisitRepository,
    private val authRepository: AuthRepository,
    private val syncManager: SyncManager
) : ViewModel() {

    companion object {
        private const val TAG = "VisitListViewModel"
    }

    // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private val _uiState = MutableStateFlow<VisitListUiState>(VisitListUiState.Loading)
    val uiState: StateFlow<VisitListUiState> = _uiState.asStateFlow()

    // –§–ª–∞–≥ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
    private val _isOffline = MutableStateFlow(false)
    val isOffline: StateFlow<Boolean> = _isOffline.asStateFlow()

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    private val _filterParams = MutableStateFlow(FilterParams())
    val filterParams: StateFlow<FilterParams> = _filterParams.asStateFlow()

    // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    private val _allVisits = MutableStateFlow<List<Visit>>(emptyList())

    // –¢–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    private val _searchQuery = MutableStateFlow("")
    val searchQuery: StateFlow<String> = _searchQuery.asStateFlow()

    // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private var currentUserId: String? = null

    init {
        // üîÑ –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º observeVisits –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        viewModelScope.launch {
            authRepository.currentUser.collectLatest { user ->
                currentUserId = user?.id
                if (currentUserId != null) {
                    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    loadVisits()

                    // –ó–∞—Ç–µ–º –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Room
                    observeVisits()

                    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                    syncManager.setupPeriodicSync()
                } else {
                    _allVisits.value = emptyList()
                    _uiState.value = VisitListUiState.Empty
                }
            }
        }
    }

    private fun observeVisits() {
        viewModelScope.launch {
            try {
                visitRepository.observeVisits().collectLatest { allVisits ->
                    Log.d(TAG, "üì± Received ${allVisits.size} visits from Room")
                    _allVisits.value = allVisits
                    applyFilters()

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –æ—Ñ–ª–∞–π–Ω
                    // (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ - –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –∑–Ω–∞—á–∏—Ç –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∫–æ–≥–¥–∞-—Ç–æ)
                    _isOffline.value = allVisits.isEmpty()
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error observing visits: ${e.message}", e)
                _uiState.value = VisitListUiState.Error(e.message ?: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            }
        }
    }

    fun loadVisits() {
        val userId = currentUserId ?: return

        viewModelScope.launch {
            _uiState.value = VisitListUiState.Loading

            try {
                // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–¥—É—Ç —á–µ—Ä–µ–∑ observeVisits()
                // –ù–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                val visits = visitRepository.getVisitsForStaff(userId)
                Log.d(TAG, "üì± Initial load: ${visits.size} visits")

                _allVisits.value = visits
                applyFilters()

            } catch (e: Exception) {
                Log.e(TAG, "Error in loadVisits: ${e.message}", e)
                // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –æ—à–∏–±–∫–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã - –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–¥—É—Ç —á–µ—Ä–µ–∑ observeVisits
                if (_allVisits.value.isEmpty()) {
                    _uiState.value = VisitListUiState.Error(e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                }
            }
        }
    }

    // üîÑ –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    fun syncVisits() {
        viewModelScope.launch {
            try {
                Log.d(TAG, "üîÑ Manual sync requested")
                syncManager.syncNow()

                // –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ observeVisits()
                _isOffline.value = false

            } catch (e: Exception) {
                Log.e(TAG, "Error syncing visits: ${e.message}", e)
                _isOffline.value = true
            }
        }
    }

    // üîÑ –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω)
    fun updateSelectedDate(date: Date) {
        _filterParams.update { it.copy(selectedDate = date) }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)
        viewModelScope.launch {
            try {
                visitRepository.getVisitsForDate(date)
                // –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ observeVisits()
            } catch (e: Exception) {
                Log.w(TAG, "Error loading visits for date: ${e.message}")
                // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
                applyFilters()
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞
    fun updateSelectedStatus(status: VisitStatus?) {
        _filterParams.update { it.copy(selectedStatus = status) }
        applyFilters()
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    fun updateGroupingType(type: GroupingType) {
        _filterParams.update { it.copy(groupingType = type) }
        applyFilters()
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    fun updateSearchQuery(query: String) {
        _searchQuery.value = query
        applyFilters()
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Å–ø–∏—Å–∫—É –≤–∏–∑–∏—Ç–æ–≤
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Å–ø–∏—Å–∫—É –≤–∏–∑–∏—Ç–æ–≤
    private fun applyFilters() {
        val filteredVisits = _allVisits.value.filter { visit ->
            val visitDate = Calendar.getInstance().apply { time = visit.scheduledTime }
            val selectedDate = Calendar.getInstance().apply { time = _filterParams.value.selectedDate }
            val sameDay = visitDate.get(Calendar.YEAR) == selectedDate.get(Calendar.YEAR) &&
                    visitDate.get(Calendar.DAY_OF_YEAR) == selectedDate.get(Calendar.DAY_OF_YEAR)

            // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            val statusMatches = _filterParams.value.selectedStatus == null ||
                    visit.status == _filterParams.value.selectedStatus

            // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            val searchMatches = _searchQuery.value.isEmpty() ||
                    visit.address.contains(_searchQuery.value, ignoreCase = true) ||
                    visit.reasonForVisit.contains(_searchQuery.value, ignoreCase = true)

            sameDay && statusMatches && searchMatches
        }

        Log.d(TAG, "üîç Filtered ${filteredVisits.size} visits from ${_allVisits.value.size} total")

        // –û–±–Ω–æ–≤–ª—è–µ–º UI-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
        _uiState.value = if (filteredVisits.isEmpty()) {
            VisitListUiState.Empty
        } else {
            VisitListUiState.Success(filteredVisits)
        }
    }

    // üîÑ –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω
    fun updateVisitStatus(visitId: String, newStatus: VisitStatus) {
        viewModelScope.launch {
            try {
                // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º Room, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–∑–∂–µ
                visitRepository.updateVisitStatus(visitId, newStatus)
                Log.d(TAG, "‚úÖ Visit status updated: $visitId -> $newStatus")

                // UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ observeVisits()

            } catch (e: Exception) {
                Log.e(TAG, "Error updating visit status: ${e.message}", e)
                // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            }
        }
    }

    // üîÑ –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω
    fun updateVisitNotes(visitId: String, notes: String) {
        viewModelScope.launch {
            try {
                visitRepository.updateVisitNotes(visitId, notes)
                Log.d(TAG, "‚úÖ Visit notes updated: $visitId")

                // UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ observeVisits()

            } catch (e: Exception) {
                Log.e(TAG, "Error updating visit notes: ${e.message}", e)
            }
        }
    }

    fun startVisit(visitId: String) {
        updateVisitStatus(visitId, VisitStatus.IN_PROGRESS)
    }

    fun completeVisit(visitId: String) {
        updateVisitStatus(visitId, VisitStatus.COMPLETED)
    }

    // üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    fun checkSyncStatus() {
        viewModelScope.launch {
            try {
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                // val unsyncedCount = visitRepository.getUnsyncedCount()
                // _isOffline.value = unsyncedCount > 0
            } catch (e: Exception) {
                Log.w(TAG, "Error checking sync status: ${e.message}")
            }
        }
    }
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
data class FilterParams(
    val selectedDate: Date = Calendar.getInstance().time,
    val selectedStatus: VisitStatus? = null,
    val groupingType: GroupingType = GroupingType.TIME
)

// –¢–∏–ø—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤–∏–∑–∏—Ç–æ–≤
enum class GroupingType {
    NONE,      // –ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    TIME,      // –ü–æ –≤—Ä–µ–º–µ–Ω–∏ (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä)
    STATUS,    // –ü–æ —Å—Ç–∞—Ç—É—Å—É
    ADDRESS    // –ü–æ —Ä–∞–π–æ–Ω—É/–∞–¥—Ä–µ—Å—É
}

sealed class VisitListUiState {
    object Loading : VisitListUiState()
    object Empty : VisitListUiState()
    data class Success(val visits: List<Visit>) : VisitListUiState()
    data class Error(val message: String) : VisitListUiState()
}