package com.example.medicalhomevisit

import android.app.Application
import android.util.Log
import androidx.hilt.work.HiltWorkerFactory
import androidx.work.Configuration
import com.example.medicalhomevisit.data.sync.SyncManager
import dagger.hilt.android.HiltAndroidApp
import javax.inject.Inject

@HiltAndroidApp
class MedicalApplication : Application(), Configuration.Provider {

    @Inject
    lateinit var workerFactory: HiltWorkerFactory  // ‚Üê –≠–¢–û –ù–£–ñ–ù–û –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò!

    @Inject
    lateinit var syncManager: SyncManager

    companion object {
        private const val TAG = "MedicalApplication"
    }

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "üöÄ Medical Home Visit App starting...")

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WorkManager –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        initializeWorkManager()
    }

    override fun getWorkManagerConfiguration(): Configuration {
        return Configuration.Builder()
            .setWorkerFactory(workerFactory)  // ‚Üê –ë–ï–ó –≠–¢–û–ì–û HILT –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –í WORKER!
            .setMinimumLoggingLevel(Log.DEBUG)
            .build()
    }

    private fun initializeWorkManager() {
        try {
            syncManager.setupPeriodicSync()
            Log.d(TAG, "‚úÖ WorkManager initialized successfully")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Failed to initialize WorkManager: ${e.message}", e)
        }
    }
}